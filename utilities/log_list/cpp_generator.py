import datetime
import base64
import math

def _write_cpp_header(f, include_guard):
    year = datetime.date.today().year
    f.write((
        "// Copyright %(year)d The Chromium Authors. All rights reserved.\n"
        "// Use of this source code is governed by a BSD-style license"
        " that can be\n"
        "// found in the LICENSE file.\n\n"
        "// This file is generated by print_log_list.py\n"
        "#ifndef %(include_guard)s\n"
        "#define %(include_guard)s\n\n" %
        {"year": year, "include_guard": include_guard}))


def _write_log_info_struct_definition(f):
    f.write(
        "struct CTLogInfo {\n"
        "  const char* const log_key;\n"
        "  const size_t log_key_length;\n"
        "  const char* const log_name;\n"
        "  const char* const log_url;\n"
        "};\n\n")


def _write_cpp_footer(f, include_guard):
    f.write("\n#endif  // %s\n" % include_guard)


def generate_cpp_header(json_log_list, output_file):
    """Generate a header file of known logs to be included by Chromium."""
    include_guard = (output_file.upper().replace('.', '_').replace('/', '_')
                     + '_')
    f = open(output_file, "w")
    _write_cpp_header(f, include_guard)
    logs = json_log_list["logs"]
    list_code = []
    for log in logs:
        log_key = base64.decodestring(log["key"])
        hex_key = "".join(["\\x%.2x" % ord(c) for c in log_key])
        # line_width % 4 must be 0 to avoid splitting the hex-encoded key
        # across '\' which will escape the quotation marks.
        line_width = 68
        assert line_width % 4 == 0
        num_splits = int(math.ceil(len(hex_key) / float(line_width)))
        split_hex_key = ['"%s"' % hex_key[i * line_width:(i + 1) * line_width]
                         for i in range(num_splits)]
        s = "    {"
        s += "\n     ".join(split_hex_key)
        s += ',\n     %d' % (len(log_key))
        s += ',\n     "%s"' % (log["description"])
        s += ',\n     "https://%s/"}' % (log["url"])
        list_code.append(s)

    _write_log_info_struct_definition(f)
    f.write("const CTLogInfo kCTLogList[] = {\n")
    f.write(",\n" . join(list_code))
    f.write("};\n")
    f.write("\nconst size_t kNumKnownCTLogs = %d;\n" % len(logs))
    _write_cpp_footer(f, include_guard)

